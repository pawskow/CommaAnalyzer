match_rules(
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "a")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "aby")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "ale")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "bo")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "bowiem")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "chociaż")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "choć")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "gdyż")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "jednak")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "jeśli")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "jeżeli")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "lecz")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "natomiast")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "ponieważ")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "żeby")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "toteż")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "dopóty")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "dlaczego")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "zanim")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "póki")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "czyj")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "gdy")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "kiedy")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "gdyby")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "który")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "jaki")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "zamiast")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "ażeby")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "iżby")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "że")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "iż")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "czyli")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "by")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "więc")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "mianowicie")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "co")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "kto")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    );
apply(
        match(
            optional(inter(class[0], {prep})),
            equal(lower(base[0]), "skąd")
        ),
        cond(
            not(isannpart(first(M), "SpojnikPojedynczy"))
        ),
        actions(
            mark(M, "SpojnikPojedynczy")
        )
    ))